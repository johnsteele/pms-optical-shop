/**
 * @author John Steele
 * @file   DatabaseManager.java
 * @date   07/15/2011
 * 
 * <p>A class to manage the databases.<p>
 */
package greenwood.database;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Properties;

import greenwood.orders.model.Order;
import greenwood.patients.model.ContactInfo;
import greenwood.patients.model.EyeCareInfo;
import greenwood.patients.model.Patient;
import greenwood.patients.model.WebInfo;

/**
 * Represents a class to manage the databases.
 */
public class DatabaseManager {
	
	/**
	 * Our local cache of the Patients in the database.
	 * The patients store their own orders, therefore they
	 * the orders are cached as well.
	 * 
	 * This allows us to work with patients and orders without hitting
	 * the database every time. 
	 */
	private PatientCache my_patientCache;
		
	/**
	 * The "dummy" data. Only loaded the first time the app
	 * is ran. After that, the data is stored in the database.
	 * It'd be nice to put this in SQL and load it from a file
	 * (e.g., INSERT INTO T_PATIENT VALUES ('..','..',...) instead
	 * of loading it from Java.
	 */
	private PatientDB my_patientData;
	
	/**
	 * The database username and password.
	 */
	private static final String USERNAME = "USER";
	private static final String PASSWORD = "ADMIN";
	
	/**
	 * The database connection URL. create;=true will only create it 
	 * if it doesn't already exist.
	 */
	private static final String DB_URL = "jdbc:derby://localhost:1527/optical;create=true";
	
	/**
	 * The connection with the database.
	 * All queries go through this object.
	 */
	private Connection my_connection;
	
	/**
	 * The connection properties.
	 */
	private Properties my_connectionProps;
	
	/**
	 * To execute SQL statements against the database.
	 */
	private Statement my_statement;
	
	/**
	 * Executing a Statement that returns values gives a ResultSet. 
	 * This allows the application to obtain the results of a SQL Statement.
	 * 
	 * Executing a Statement automatically closes any open ResultSet 
	 * generated by an earlier execution of a Statement.
	 */
	private ResultSet my_resultSet;
	
	/**
	 * PreparedStatements. It is recommended to use PreparedStatements when you
	 * are repeating SQL statements. They also allow you to parameterize 
	 * variables. By using them you can increase performance (because the
	 * Derby engine does not need to recompile the SQL statement each time) 
	 * and improves security (because of Java type checking).
	 */
	private List<PreparedStatement> my_preparedStatements;
	
	
	/* *************************** Create Database Tables ******************************/
	/** Patient Table. */
	private String createPatientTable = 
		"CREATE TABLE T_PERSON (ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY, " +
								"LAST_NAME VARCHAR(255), " +
								"FIRST_NAME VARCHAR(255), " +
								"DOB VARCHAR(255), " +
								"ISMALE INTEGER)";
	
	/** Order Table. */
	private String createOrderTable =
		"CREATE TABLE T_ORDER (ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY, " +
								"LAST_NAME VARCHAR(255), " +
								"FIRST_NAME VARCHAR(255), " + 
								"DESCRIPTION VARCHAR(255), " +
								"JOBNUM INTEGER, " +
								"STATUS VARCHAR(255), " +
								"ORDER_DAY INTEGER, " +
								"ORDER_MONTH INTEGER, " + 
								"ORDER_YEAR INTEGER, " +
								"STATUS_DAY INTEGER, " + 
								"STATUS_MONTH INTEGER, " + 
								"STATUS_YEAR INTEGER)";
	
	/** WebInfo table. */
	private String createWebInfoTable = 
		"CREATE TABLE T_WEBINFO (ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY, " +
								"LAST_NAME VARCHAR(255), " +
								"FIRST_NAME VARCHAR(255), " +
								"EMAIL VARCHAR(50), " +
								"USERNAME VARCHAR(50), " +
								"PASSWORD VARCHAR(50))";
	
	/** EyeInfo table. */
	private String createEyeInfoTable = 
		"CREATE TABLE T_EYEINFO (ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY, " +
								"LAST_NAME VARCHAR(255), " +
								"FIRST_NAME VARCHAR(255), " +
								"PRACTICE VARCHAR(50), " +
								"LOCATION_INDEX INTEGER, " +
								"DOCTOR VARCHAR (255), " +
								"DISCOUNT INTEGER, " +
								"LAST_EXAM VARCHAR(255), " +
								"NEXT_EXAM VARCHAR(255), " +
								"EMAIL_NOTIFY INTEGER, " +
								"NOTES VARCHAR(255))";

	
	/** ContactInfo table. */
	private String createContactInfoTable = 
		"CREATE TABLE T_CONTACTINFO (ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY, " +
								"LAST_NAME VARCHAR(255), " +
								"FIRST_NAME VARCHAR(255), " +
								"ADDRESS1 VARCHAR(255), " +
								"ADDRESS2 VARCHAR(255), " +
								"ADDRESS3 VARCHAR(255), " +
								"CITY VARCHAR(50), " +
								"STATE VARCHAR(50), " +
								"ZIP INTEGER, " +
								"HOME_PHONE VARCHAR(50), " +
								"CELL_PHONE VARCHAR(50), " +
								"WORK_PHONE VARCHAR(50), " +
								"FAX VARCHAR(50))";
	
	/** Prepared statements. */
	private String insertPatient = 
		"INSERT INTO T_PERSON (LAST_NAME, FIRST_NAME, DOB, ISMALE) VALUES (?, ?, ?, ?)";
	
	private String insertOrder =
		"INSERT INTO T_ORDER (LAST_NAME, FIRST_NAME, DESCRIPTION, JOBNUM, STATUS, ORDER_DAY, ORDER_MONTH, " +
		"ORDER_YEAR, STATUS_DAY, STATUS_MONTH, STATUS_YEAR) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	
	private String insertWebInfo = 
		"INSERT INTO T_WEBINFO (LAST_NAME, FIRST_NAME, EMAIL, USERNAME, PASSWORD) VALUES (?, ?, ?, ?, ?)";
	
	private String insertEyeInfo = 
		"INSERT INTO T_EYEINFO (LAST_NAME, FIRST_NAME, PRACTICE, LOCATION_INDEX, DOCTOR, DISCOUNT, LAST_EXAM, " + 
		"NEXT_EXAM, EMAIL_NOTIFY, NOTES) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	
	private String insertContactInfo = 
		"INSERT INTO T_CONTACTINFO (LAST_NAME, FIRST_NAME, ADDRESS1, ADDRESS2, ADDRESS3, CITY, STATE, ZIP, " +
		"HOME_PHONE, CELL_PHONE, WORK_PHONE, FAX) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	
	private String queryPatientOrders =
		"SELECT * FROM T_ORDER WHERE T_ORDER.LAST_NAME = ? and T_ORDER.FIRST_NAME = ?";
	
	private String queryPatientWebInfo = 
		"SELECT * FROM T_WEBINFO WHERE T_WEBINFO.LAST_NAME = ? and T_WEBINFO.FIRST_NAME = ?";
	
	private String queryPatientEyeInfo = 
		"SELECT * FROM T_EYEINFO WHERE T_EYEINFO.LAST_NAME = ? and T_EYEINFO.FIRST_NAME = ?";
	
	private String queryPatientContactInfo = 
		"SELECT * FROM T_CONTACTINFO WHERE T_CONTACTINFO.LAST_NAME = ? and T_CONTACTINFO.FIRST_NAME = ?";
	
	/** Retrieve all patients query. */
	private String queryPatients = "SELECT * FROM T_PERSON ORDER BY LAST_NAME";
	
	private String updatePatient = 
		"UPDATE T_PERSON SET DOB = ?, ISMALE = ? WHERE T_PERSON.LAST_NAME = ? and T_PERSON.FIRST_NAME = ?";
	

	/**
	 * Creates a DatabaseManager with default values. A database
	 * connection is made.
	 */
	public DatabaseManager () {
		
		initProperties();
		connectToDatabase();
		
		boolean created = false;
		//created = createTables();
		prepareStatements();
		
		// Stores the patients and orders from the database.
		my_patientCache = new PatientCache();	
		
		// If the database was just created, load some dummy data into it.
		if (created) {
			// Now lets load some dummy data into it.
			PatientDB db = new PatientDB();		
			
			// Go through each patient.
			for (Patient p : db.getPatientsList()) {
				// Insert patient into database.
				insertPatient (p);					
				// Go through the patient's orders.
				for (Order o : p.getOrders()) {	
					// Insert the patient's order into database.
					insertOrder(o);
				}
				// Insert patient web info.
				insertWebInfo(p);
				// Insert patient eye care info.
				insertEyeInfo(p);
				// Insert contact info.
				insertContactInfo(p);
			}
		}
	
		else 
			my_patientCache.setCachedPatients(queryPatients());	
	}
	
	
	/**
	 * Initializes the database properties.
	 */
	private void initProperties () {
		my_connectionProps = new Properties();
		my_connectionProps.setProperty("user", USERNAME);
		my_connectionProps.setProperty("password", PASSWORD);
	}
	
	
	/**
	 * Creates a connection to the database.
	 */
	private void connectToDatabase () {		
		// Establish a connection
		try {
			my_connection = DriverManager.getConnection(DB_URL, my_connectionProps);
		}		
		catch (SQLException e){
			System.out.println("***Failed to connect to: " + DB_URL);
			System.out.flush();
			e.printStackTrace();
		}
	}	
	
	
	/**
	 * Creates the database tables if they don't already exist.
	 * 
	 * @return True if created tables, false otherwise.
	 */
	private boolean createTables () {
		
		boolean result = false;
		
		if (!doTablesExist()) {
			try {
				// Create Patient and Order table.
				my_statement = my_connection.createStatement();
				my_statement.executeUpdate(createPatientTable);
				my_statement = my_connection.createStatement();
				my_statement.executeUpdate(createOrderTable);
				my_statement = my_connection.createStatement();
				
				// Create Email, EyeInfo, and Contact table.
				my_statement.executeUpdate(createWebInfoTable);
				my_statement = my_connection.createStatement();
				my_statement.executeUpdate(createEyeInfoTable);
				my_statement = my_connection.createStatement();
				my_statement.executeUpdate(createContactInfoTable);
				my_statement = my_connection.createStatement();
				result = true;
			}
			
			catch (SQLException e) {
				System.out.println("***Failed to create Patient table.");
				System.out.flush();
				e.printStackTrace();
			}
		}
		return result;
	}
	
	
	/**
	 * Checks if the database tables already exist.
	 */
	private boolean doTablesExist () {
		boolean result = false;
		
		try {
			DatabaseMetaData dbmd = my_connection.getMetaData();
			ResultSet rs = dbmd.getAttributes(null, null, "T_PERSON", null);
			
			/* If table already exists. */
			if (rs.next() && rs.getString(3).equals("T_PERSON")) {
				result = true;
			}
			
			/* Otherwise, table does not exist; create it. */
			else {
				result = false;
			}
		}
		
		catch (SQLException e) {
			System.out.println("***Failed to get Database Meta Data...");
			System.out.flush();
			e.printStackTrace();
		}
		
		return result;
	}
	
	
	/**
	 * Creates PreparedStatment objects for future SQL queries.
	 */
	private void prepareStatements () {
		my_preparedStatements = new ArrayList<PreparedStatement>();
		PreparedStatement statement;
		
		try {
			/* Patient statements */
			statement = my_connection.prepareStatement(insertPatient);
			my_preparedStatements.add(statement);
			
			// query patient orders.
			statement = my_connection.prepareStatement(queryPatientOrders);
			my_preparedStatements.add(statement);
			
			// query patient web info.
			statement = my_connection.prepareStatement(queryPatientWebInfo);
			my_preparedStatements.add(statement);
			
			// query patient eye info. 
			statement = my_connection.prepareStatement(queryPatientEyeInfo);
			my_preparedStatements.add(statement);
			
			// query patient contact info.
			statement = my_connection.prepareStatement(queryPatientContactInfo);
			my_preparedStatements.add(statement);
			
			// insert web info.
			statement = my_connection.prepareStatement(insertWebInfo);
			my_preparedStatements.add(statement);
			
			// insert eye info.
			statement = my_connection.prepareStatement(insertEyeInfo);
			my_preparedStatements.add(statement);
			
			// insert contact info.
			statement = my_connection.prepareStatement(insertContactInfo);
			my_preparedStatements.add(statement);
			
			/* Order statements. */
			statement = my_connection.prepareStatement(insertOrder);
			my_preparedStatements.add(statement);
			
			/* Update Patient */
			// update patient
			statement = my_connection.prepareStatement(updatePatient);
			my_preparedStatements.add(statement);
		}
		
		catch (SQLException e) {
			System.out.println("***Failed to create PreparedStatement(s).");
			System.out.flush();
			e.printStackTrace();
		}
		
		
	}
	
	
	/**
	 * Get the patients from the database, this also queries the database
	 * for each of the patient's orders, and adds the orders to the patient's list.
	 */
	private List<Patient> queryPatients () {
		
		List<Patient> patients = new ArrayList<Patient>();
		try {
			my_statement = my_connection.createStatement();
			my_resultSet = my_statement.executeQuery(queryPatients);
			
			// The cursor is at the first row, and moves down by calling 'next()'.
			while (my_resultSet.next()) {
				String fname = my_resultSet.getString("FIRST_NAME");
				String lname = my_resultSet.getString("LAST_NAME");
				String dob   = my_resultSet.getString("DOB");
				int isMale   = my_resultSet.getInt("ISMALE");
				boolean male = isMale == 1 ? true : false;
				
				
				Patient p = new Patient(fname, lname, dob, male);
				// Patient orders.
				queryPatientOrders(p);
				// Patient web info.
				queryPatientWebInfo(p);
				// Patient eye info.
				queryPatientEyeInfo(p);
				// Patient contact info.
				queryPatientContactInfo(p);
				patients.add(p);
			}
		}

		catch (SQLException e) {
			System.out.println("***Failed to query patients.");
			System.out.flush();
			e.printStackTrace();
		}
			
		
		return patients;
	}
	
	
	/**
	 * Inserts the provided patient into the database. The
	 * patient is also added to the patient cache.
	 * 
	 * @param the_patient The patient to insert.
	 */
	public void insertPatient (Patient the_patient) {
		
		String lastName  = the_patient.getLastName();
		String firstName = the_patient.getFirstName();
		String dob       = the_patient.getDOB();
		boolean isMale   = the_patient.getGender();
		int male = isMale == true ? 1 : 0;
		
		PreparedStatement statement = my_preparedStatements.get(0);
		
		try {
			
			// Insert the patient to the database.
			statement.setString(1, lastName);
			statement.setString(2, firstName);
			statement.setString(3, dob);
			statement.setInt(4, male);
			statement.executeUpdate();
			
			// Add the patient to the cache.
			my_patientCache.getCachedPatients().add(the_patient);
		}
		catch (SQLException e) {
			System.out.println("***Failed to insert patient...");
			System.out.flush();
			e.printStackTrace();
		}
	}
	
	
	/**
	 * Inserts the provided Order into the database.
	 */
	public void insertOrder (Order the_order) {
		String last   = the_order.getPatient().getLastName();
		String first  = the_order.getPatient().getFirstName();
		String desc   = the_order.getDescription();
		int jobNum    = the_order.getJobNumber();
		String status = the_order.getStatus();
		int o_day     = the_order.getOrderDate()[0];
		int o_month   = the_order.getOrderDate()[1];
		int o_year    = the_order.getOrderDate()[2];
		int s_day     = the_order.getStatusDate()[0];
		int s_month   = the_order.getStatusDate()[1];
		int s_year    = the_order.getStatusDate()[2];

		
		PreparedStatement statement = my_preparedStatements.get(8);
		
		try {
			statement.setString(1, last);
			statement.setString(2, first);
			statement.setString(3, desc);
			statement.setInt(4, jobNum);
			statement.setString(5, status);
			statement.setInt(6, o_day);
			statement.setInt(7, o_month);
			statement.setInt(8, o_year);
			statement.setInt(9, s_day);
			statement.setInt(10, s_month);
			statement.setInt(11, s_year);
			statement.executeUpdate();
		}
		
		catch (SQLException e) {
			System.out.println("***Failed to insert Order...");
			System.out.flush();
			e.printStackTrace();
		}
	}
	
	
	/**
	 * Query database for list of provided patient's orders, and then
	 * adds the orders to the patient's list of orders.
	 * 
	 * @param the_patient The patient to query orders for.
	 * @return The list of orders for the specified patient.
	 */
	public void queryPatientOrders (Patient the_patient) {
		
		PreparedStatement statement = my_preparedStatements.get(1);
		try {
			statement.setString(1, the_patient.getLastName());
			statement.setString(2, the_patient.getFirstName());
			ResultSet result = statement.executeQuery();
			
			// Go through the result; add them to the patient.
			while (result.next()) {
				String desc = result.getString("DESCRIPTION");
				int jobNum = result.getInt("JOBNUM");
				String stat = result.getString("STATUS");
				int o_d   = result.getInt("ORDER_DAY");
				int o_m   = result.getInt("ORDER_MONTH");
				int o_y   = result.getInt("ORDER_YEAR");
				int s_d   = result.getInt("STATUS_DAY");
				int s_m   = result.getInt("STATUS_MONTH");
				int s_y   = result.getInt("STATUS_YEAR");
				Order o = new Order(the_patient, o_d, o_m, o_y, jobNum, desc, stat, s_d, s_m, s_y);
				// Add the order to the patient.
				the_patient.addOrder(o);
			}
		}
		
		catch (SQLException e) {
			System.out.println("***Failed to query the patient's orders...");
			System.out.flush();
			e.printStackTrace();
		}
	}
	
	
	/**
	 * Queries database for the provided patient's web info.
	 * The WebInfo is added to the patient.
	 * 
	 * @param the_patient The patient to query web info for.
	 */
	public void queryPatientWebInfo (Patient the_patient) {
		PreparedStatement statement = my_preparedStatements.get(2);
		
		try {
			String last  = the_patient.getLastName();
			String first = the_patient.getFirstName();
			statement.setString(1, last);
			statement.setString(2, first);
			ResultSet result = statement.executeQuery();
			
			// EMAIL, USERNAME, PASSWORD
			if (result.next()) {
				String email = result.getString("EMAIL");
				String user  = result.getString("USERNAME");
				String pass  = result.getString("PASSWORD");
				WebInfo info = new WebInfo(email, user, pass);
				the_patient.setWebInfo(info);
			}
		}
		
		catch (SQLException e) {
			System.out.println("***Failed to query patient WebInfo...");
			System.out.flush();
			e.printStackTrace();
		}
	}
	
	
	/**
	 * Inserts the provided patient's web info into the database.
	 * 
	 * @param the_patient The patient who's web info is to insert.
	 */
	public void insertWebInfo (Patient the_patient) {
		PreparedStatement statement = my_preparedStatements.get(5);
		String last = the_patient.getLastName();
		String first = the_patient.getFirstName();
		String email = the_patient.getWebInfo().getEmail();
		String user  = the_patient.getWebInfo().getUsername();
		String pass  = the_patient.getWebInfo().getPassword();
	
		try {
			// LAST_NAME, FIRST_NAME, EMAIL, USERNAME, PASSWORD
			statement.setString(1, last);
			statement.setString(2, first);
			statement.setString(3, email);
			statement.setString(4, user);
			statement.setString(5, pass);
			statement.executeUpdate();
		}
		
		catch (SQLException e) {
			System.out.println("***Failed to insert WebInfo...");
			System.out.flush();
			e.printStackTrace();
		}
	}
	
	
	/**
	 * Queries database for the provided patient's eye care info.
	 * The EyeInfo is added to the patient.
	 * 
	 * @param the_patient The patient to query eye info for.
	 */
	public void queryPatientEyeInfo (Patient the_patient) {
		PreparedStatement statement = my_preparedStatements.get(3);
		
		try {
			String last = the_patient.getLastName();
			String first = the_patient.getFirstName();
			statement.setString(1, last);
			statement.setString(2, first);
			ResultSet result = statement.executeQuery();
			
			// PRACTICE, LOCATION_INDEX, DOCTOR, DISCOUNT, LAST_EXAM, NEXT_EXAM, EMAIL_NOTIFY, NOTES
			if (result.next()) {
				String practice = result.getString("PRACTICE");
				int location    = result.getInt   ("LOCATION_INDEX");
				String doc      = result.getString("DOCTOR");
				int discount    = result.getInt   ("DISCOUNT");
				String lastExam = result.getString("LAST_EXAM");
				String nextExam = result.getString("NEXT_EXAM");
				int notify      = result.getInt   ("EMAIL_NOTIFY");
				String notes    = result.getString("NOTES");
				boolean emailNotify = notify == 1 ? true : false;
				EyeCareInfo info = new EyeCareInfo(practice, location, doc, discount, lastExam, nextExam, emailNotify, notes);
				the_patient.setEyeInfo(info);
			}
		}
		
		catch (SQLException e) {
			System.out.println("***Failed to query patient EyeInfo...");
			System.out.flush();
			e.printStackTrace();
		}
	}
	
	
	/**
	 * Inserts the provided patient's eye care info into the database.
	 * 
	 * @param the_patient The patient whos eye care is to insert.
	 */
	public void insertEyeInfo (Patient the_patient) {
		PreparedStatement statement = my_preparedStatements.get(6);
		String last = the_patient.getLastName();
		String first = the_patient.getFirstName();
		String practice = the_patient.getEyeInfo().getPractice();
		int location = the_patient.getEyeInfo().getLocationIndex();
		String doc   = the_patient.getEyeInfo().getDoctor();
		int discount = the_patient.getEyeInfo().getDiscount();
		String lastE = the_patient.getEyeInfo().getLastExam();
		String nextE = the_patient.getEyeInfo().getNextExam();
		int notify   = the_patient.getEyeInfo().isEmailNotification() == true ? 1 : 0;
		String notes = the_patient.getEyeInfo().getNotes();
				
		try {
			// LAST_NAME, FIRST_NAME, PRACTICE, LOCATION_INDEX, DOCTOR, DISCOUNT, LAST_EXAM,  
			// NEXT_EXAM, EMAIL_NOTIFY, NOTES
			statement.setString(1, last);
			statement.setString(2, first);
			statement.setString(3, practice);
			statement.setInt(4, location);
			statement.setString(5, doc);
			statement.setInt(6, discount);
			statement.setString(7, lastE);
			statement.setString(8, nextE);
			statement.setInt(9, notify);
			statement.setString(10, notes);
			statement.executeUpdate();
		}
		
		catch (SQLException e) {
			System.out.println("***Failed to insert WebInfo...");
			System.out.flush();
			e.printStackTrace();
		}
	}
	
	
	/**
	 * Query database for the provided patient's contact info.
	 * 
	 * @param the_patient The patient to query contact info for.
	 */
	public void queryPatientContactInfo (Patient the_patient) {
		PreparedStatement statement = my_preparedStatements.get(4);
		
		try {
			String last = the_patient.getLastName();
			String first = the_patient.getFirstName();
			statement.setString(1, last);
			statement.setString(2, first);
			
			ResultSet result = statement.executeQuery();
			
			if (result.next()) {
				// ADDRESS1, ADDRESS2, ADDRESS3, CITY, STATE, ZIP, HOME_PHONE, CELL_PHONE, WORK_PHONE, FAX
				String addr1 = result.getString("ADDRESS1");
				String addr2 = result.getString("ADDRESS2");
				String addr3 = result.getString("ADDRESS3");
				String city  = result.getString("CITY");
				String state = result.getString("STATE");
				int zip      = result.getInt   ("ZIP");
				String h_p   = result.getString("HOME_PHONE");
				String c_p   = result.getString("CELL_PHONE");
				String w_p   = result.getString("WORK_PHONE");
				String fax   = result.getString("FAX");
				ContactInfo info = new ContactInfo(addr1, addr2, addr3, city, state, zip, h_p, c_p, w_p, fax);
				the_patient.setContactInfo(info);
			}
		}
		
		catch (SQLException e) {
			System.out.println("***Failed to query patient ContactInfo...");
			System.out.flush();
			e.printStackTrace();
		}
	}
	
	
	/**
	 * Inserts the provided patient's contact info into the database.
	 * 
	 * @param the_patient The patient who's contact info is to be inserted.
	 */
	public void insertContactInfo (Patient the_patient) {
		PreparedStatement statement = my_preparedStatements.get(7);
		String last = the_patient.getLastName();
		String first = the_patient.getFirstName();
		String addr1 = the_patient.getContactInfo().getAddress1();
		String addr2 = the_patient.getContactInfo().getAddress2();
		String addr3 = the_patient.getContactInfo().getAddress3();
		String city = the_patient.getContactInfo().getCity();
		String state = the_patient.getContactInfo().getState();
		int zip = the_patient.getContactInfo().getZip();
		String h_p = the_patient.getContactInfo().getHome_phone();
		String c_p = the_patient.getContactInfo().getCell_phone();
		String w_p = the_patient.getContactInfo().getWork_phone();
		String fax = the_patient.getContactInfo().getFax();
		
		try {
			// LAST_NAME, FIRST_NAME, ADDRESS1, ADDRESS2, ADDRESS3, CITY, STATE, ZIP, 
			// HOME_PHONE, CELL_PHONE, WORK_PHONE, FAX
			statement.setString(1, last);
			statement.setString(2, first);
			statement.setString(3, addr1);
			statement.setString(4, addr2);
			statement.setString(5, addr3);
			statement.setString(6, city);
			statement.setString(7, state);
			statement.setInt(8, zip);
			statement.setString(9, h_p);
			statement.setString(10, c_p);
			statement.setString(11, w_p);
			statement.setString(12, fax);
			statement.executeUpdate();
		}
		
		catch (SQLException e) {
			System.out.println("***Failed to isnert contact info...");
			System.out.flush();
			e.printStackTrace();
		}
	}
	
	
	/**
	 * Shuts down the database, not the server.
	 */
	public void shutDownDatabase () {
		
		/*
		 * This step is not vital, but it will take longer to connect
		 * next time if not because it will run its recovery code.
		 * 
		 * If you omit the path all databases will be shut down:
		 * derby:jdbc:;shutdown=true
		 * But we won't do that here.
		 */
		try {
			DriverManager.getConnection(DB_URL + ";shutdown=true");
		}
		
		catch (SQLException e) {
			System.out.println("***Failed to close database: " + DB_URL);
			System.out.flush();
			e.printStackTrace();
		}
	}
	
	
	/**
	 * Returns the cached list of patients.
	 * 
	 * @return The list of patients.
	 */
	public List<Patient> getPatients () {
		return my_patientCache.getCachedPatients();
	}
	
	
	/**
	 * Returns the cached list of orders.
	 * 
	 * @return The list of orders.
	 */
	public List<Order> getOrders () {
		List<Order> result = new ArrayList<Order>();
		
		// Go through each patient.
		for (Patient p : my_patientCache.getCachedPatients()) {
			// Go through the patient's orders.
			for (Order o : p.getOrders()) {
				result.add(o);
			}
		}
		return result;
	}
	
	
	/**
	 * Updates the patient in the database. 
	 */
	public void updatePatient (Patient the_patient) {
		
	}
}
